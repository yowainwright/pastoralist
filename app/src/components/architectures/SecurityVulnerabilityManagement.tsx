import React from "react";
import { MarkerType, Position } from "reactflow";
import type { Node, Edge } from "reactflow";
import { nodeStyles, edgeStyles } from "./styles";
import FlowModalProvider from "./FlowModalProvider";

const nodes: Node[] = [
  {
    id: "start",
    position: { x: 350, y: 20 },
    data: { label: "pastoralist --checkSecurity" },
    sourcePosition: Position.Bottom,
    style: { ...nodeStyles.error, width: "200px", height: "50px" },
  },
  {
    id: "scanning-group",
    type: "group",
    position: { x: 50, y: 100 },
    data: { label: "Scanning Phase" },
    style: {
      background: "rgba(107, 114, 128, 0.05)",
      border: "1px dashed #6B7280",
      borderRadius: "0.75rem",
      padding: "16px",
      fontSize: "11px",
      fontWeight: 600,
      color: "#6B7280",
      width: 220,
      height: 280,
    },
  },
  {
    id: "collect-deps",
    position: { x: 20, y: 40 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Collect all</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            dependencies
          </div>
        </div>
      ),
    },
    parentNode: "scanning-group",
    extent: "parent",
    sourcePosition: Position.Bottom,
    targetPosition: Position.Top,
    style: { ...nodeStyles.process, width: "170px", height: "65px", paddingBottom: "8px" },
  },
  {
    id: "query-osv",
    position: { x: 20, y: 120 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Query OSV</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            database
          </div>
        </div>
      ),
    },
    parentNode: "scanning-group",
    extent: "parent",
    sourcePosition: Position.Bottom,
    targetPosition: Position.Top,
    style: { ...nodeStyles.warning, width: "170px", height: "65px", paddingBottom: "8px" },
  },
  {
    id: "analyze-vuln",
    position: { x: 20, y: 200 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Analyze</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            vulnerabilities
          </div>
        </div>
      ),
    },
    parentNode: "scanning-group",
    extent: "parent",
    sourcePosition: Position.Right,
    targetPosition: Position.Top,
    style: { ...nodeStyles.process, width: "170px", height: "65px", paddingBottom: "8px" },
  },
  {
    id: "decision-group",
    type: "group",
    position: { x: 320, y: 120 },
    data: { label: "Decision Phase" },
    style: {
      background: "rgba(107, 114, 128, 0.05)",
      border: "1px dashed #6B7280",
      borderRadius: "0.75rem",
      padding: "16px",
      fontSize: "11px",
      fontWeight: 600,
      color: "#6B7280",
      width: 200,
      height: 200,
    },
  },
  {
    id: "check-severity",
    position: { x: 20, y: 40 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Above</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            threshold?
          </div>
        </div>
      ),
    },
    parentNode: "decision-group",
    extent: "parent",
    sourcePosition: Position.Bottom,
    targetPosition: Position.Left,
    style: { ...nodeStyles.special, width: "150px", height: "65px", paddingBottom: "8px" },
  },
  {
    id: "check-mode",
    position: { x: 20, y: 120 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Fix mode?</div>
        </div>
      ),
    },
    parentNode: "decision-group",
    extent: "parent",
    sourcePosition: Position.Right,
    targetPosition: Position.Top,
    style: { ...nodeStyles.special, width: "150px", height: "50px" },
  },
  {
    id: "fix-group",
    type: "group",
    position: { x: 570, y: 160 },
    data: { label: "Fix Actions" },
    style: {
      background: "rgba(107, 114, 128, 0.05)",
      border: "1px dashed #6B7280",
      borderRadius: "0.75rem",
      padding: "16px",
      fontSize: "11px",
      fontWeight: 600,
      color: "#6B7280",
      width: 240,
      height: 280,
    },
  },
  {
    id: "auto-fix",
    position: { x: 30, y: 40 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Generate all</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            override fixes
          </div>
        </div>
      ),
    },
    parentNode: "fix-group",
    extent: "parent",
    sourcePosition: Position.Bottom,
    targetPosition: Position.Left,
    style: { ...nodeStyles.success, width: "180px", height: "65px", paddingBottom: "8px" },
  },
  {
    id: "interactive",
    position: { x: 30, y: 120 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Show options</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            to user
          </div>
        </div>
      ),
    },
    parentNode: "fix-group",
    extent: "parent",
    sourcePosition: Position.Bottom,
    targetPosition: Position.Left,
    style: { ...nodeStyles.info, width: "180px", height: "65px", paddingBottom: "8px" },
  },
  {
    id: "user-select",
    position: { x: 30, y: 200 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>User selects</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            fixes
          </div>
        </div>
      ),
    },
    parentNode: "fix-group",
    extent: "parent",
    sourcePosition: Position.Bottom,
    targetPosition: Position.Top,
    style: { ...nodeStyles.info, width: "180px", height: "65px", paddingBottom: "8px" },
  },
  {
    id: "application-group",
    type: "group",
    position: { x: 300, y: 480 },
    data: { label: "Application" },
    style: {
      background: "rgba(107, 114, 128, 0.05)",
      border: "1px dashed #6B7280",
      borderRadius: "0.75rem",
      padding: "16px",
      fontSize: "11px",
      fontWeight: 600,
      color: "#6B7280",
      width: 400,
      height: 100,
    },
  },
  {
    id: "apply-overrides",
    position: { x: 10, y: 40 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Add security</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            overrides
          </div>
        </div>
      ),
    },
    parentNode: "application-group",
    extent: "parent",
    sourcePosition: Position.Right,
    targetPosition: Position.Top,
    style: { ...nodeStyles.success, width: "120px", height: "60px", paddingBottom: "8px" },
  },
  {
    id: "create-backup",
    position: { x: 140, y: 40 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Create</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            backup
          </div>
        </div>
      ),
    },
    parentNode: "application-group",
    extent: "parent",
    sourcePosition: Position.Right,
    targetPosition: Position.Left,
    style: { ...nodeStyles.default, width: "120px", height: "60px", paddingBottom: "8px" },
  },
  {
    id: "update-appendix",
    position: { x: 270, y: 40 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Update</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            appendix
          </div>
        </div>
      ),
    },
    parentNode: "application-group",
    extent: "parent",
    sourcePosition: Position.Bottom,
    targetPosition: Position.Left,
    style: { ...nodeStyles.success, width: "120px", height: "60px", paddingBottom: "8px" },
  },
  {
    id: "success",
    position: { x: 450, y: 620 },
    data: { label: "Fixed!" },
    targetPosition: Position.Top,
    style: { ...nodeStyles.success, width: "100px", height: "40px" },
  },
  {
    id: "report",
    position: { x: 50, y: 480 },
    data: {
      label: (
        <div style={{ textAlign: "center" }}>
          <div style={{ fontWeight: 600 }}>Generate</div>
          <div style={{ fontSize: "11px", opacity: 0.8, marginTop: "2px" }}>
            report
          </div>
        </div>
      ),
    },
    targetPosition: Position.Left,
    style: { ...nodeStyles.output, width: "120px", height: "60px", paddingBottom: "8px" },
  },
  {
    id: "end",
    position: { x: 50, y: 620 },
    data: { label: "No action needed" },
    targetPosition: Position.Top,
    style: { ...nodeStyles.default, width: "140px", height: "40px" },
  },
];

const edges: Edge[] = [
  {
    id: "start-collect",
    source: "start",
    target: "collect-deps",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "collect-query",
    source: "collect-deps",
    target: "query-osv",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "query-analyze",
    source: "query-osv",
    target: "analyze-vuln",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "analyze-check",
    source: "analyze-vuln",
    target: "check-severity",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "severity-mode",
    source: "check-severity",
    target: "check-mode",
    type: "smoothstep",
    label: "Yes",
    labelStyle: { fontSize: 11 },
    style: edgeStyles.default,
  },
  {
    id: "severity-end",
    source: "check-severity",
    target: "end",
    type: "smoothstep",
    label: "No",
    labelStyle: { fontSize: 11 },
    style: edgeStyles.default,
  },
  {
    id: "mode-auto",
    source: "check-mode",
    target: "auto-fix",
    type: "smoothstep",
    label: "Auto",
    labelStyle: { fontSize: 11 },
    style: edgeStyles.default,
  },
  {
    id: "mode-interactive",
    source: "check-mode",
    target: "interactive",
    type: "smoothstep",
    label: "Interactive",
    labelStyle: { fontSize: 11 },
    style: edgeStyles.default,
  },
  {
    id: "mode-report",
    source: "check-mode",
    target: "report",
    type: "smoothstep",
    label: "Report only",
    labelStyle: { fontSize: 11 },
    style: edgeStyles.default,
  },
  {
    id: "interactive-select",
    source: "interactive",
    target: "user-select",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "select-apply",
    source: "user-select",
    target: "apply-overrides",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "auto-apply",
    source: "auto-fix",
    target: "apply-overrides",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "apply-backup",
    source: "apply-overrides",
    target: "create-backup",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "backup-update",
    source: "create-backup",
    target: "update-appendix",
    type: "smoothstep",
    style: edgeStyles.default,
  },
  {
    id: "update-success",
    source: "update-appendix",
    target: "success",
    type: "smoothstep",
    style: edgeStyles.success,
    markerEnd: {
      type: MarkerType.ArrowClosed,
      color: edgeStyles.success.stroke,
    },
  },
  {
    id: "report-end",
    source: "report",
    target: "end",
    type: "smoothstep",
    style: edgeStyles.default,
  },
];

const SecurityVulnerabilityManagement: React.FC = () => {
  return <FlowModalProvider nodes={nodes} edges={edges} title="Security Vulnerability Management" />;
};

export default SecurityVulnerabilityManagement;