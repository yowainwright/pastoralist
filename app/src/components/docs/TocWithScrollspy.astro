---
const { headings } = Astro.props;

const toc = buildToc(headings || []);

function buildToc(headings) {
  const toc = [];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      const parent = parentHeadings.get(heading.depth - 1);
      if (parent && parent.subheadings) {
        parent.subheadings.push(heading);
      }
    }
  });
  return toc;
}
---

{toc.length > 0 && (
  <div class="hidden xl:sticky xl:block xl:top-28 w-64">
    <nav aria-label="Table of contents">
      <h2 class="mb-3 text-xs font-semibold text-base-content/60 uppercase tracking-wider font-spline-sans-mono">
        On this page
      </h2>
      <ul id="toc-list" class="space-y-2.5">
        {toc.map((heading) => (
          <li>
            <a
              href={`#${heading.slug}`}
              data-toc-link
              class="block text-sm text-base-content/70 hover:text-[#1D4ED8] transition-colors py-1 border-l-2 border-transparent pl-4 -ml-0.5 font-spline-sans-mono"
            >
              {heading.text}
            </a>
            {heading.subheadings.length > 0 && (
              <ul class="mt-2 space-y-2 ml-3">
                {heading.subheadings.map((subheading) => (
                  <li>
                    <a
                      href={`#${subheading.slug}`}
                      data-toc-link
                      class="block text-base-content/60 hover:text-[#1D4ED8] text-sm transition-colors py-0.5 border-l-2 border-transparent pl-4 -ml-0.5 font-spline-sans-mono"
                    >
                      {subheading.text}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
  </div>

  <script>
    function initScrollspy() {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const id = entry.target.getAttribute('id');
            const tocLink = document.querySelector(`a[href="#${id}"]`);

            if (entry.isIntersecting) {
              // Remove active class from all links
              document.querySelectorAll('[data-toc-link]').forEach((link) => {
                link.classList.remove('text-[#1D4ED8]', 'font-medium', 'border-[#1D4ED8]');
                link.classList.add('text-base-content/70', 'border-transparent');
              });

              // Add active class to current link
              if (tocLink) {
                tocLink.classList.remove('text-base-content/70', 'text-base-content/60', 'border-transparent');
                tocLink.classList.add('text-[#1D4ED8]', 'font-medium', 'border-[#1D4ED8]');
              }
            }
          });
        },
        {
          rootMargin: '-20% 0% -70% 0%',
          threshold: 0
        }
      );

      // Observe all heading elements
      document.querySelectorAll('h2[id], h3[id], h4[id]').forEach((heading) => {
        observer.observe(heading);
      });

      // Smooth scroll behavior
      document.querySelectorAll('[data-toc-link]').forEach((link) => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            const yOffset = -100; // Offset for fixed header
            const y = targetElement.getBoundingClientRect().top + window.pageYOffset + yOffset;
            window.scrollTo({ top: y, behavior: 'smooth' });
          }
        });
      });
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', initScrollspy);
    // Reinitialize on Astro page navigation
    document.addEventListener('astro:page-load', initScrollspy);
  </script>
)}